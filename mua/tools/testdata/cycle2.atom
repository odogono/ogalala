#source test.odl
#date Tue Sep 29 14:49:57 GMT+00:00 1998
#copyright Ogalala Ltd
#import CYCLE_1
#export CYCLE_2


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Lines starting with a #-sign are "private" comments
# that may be used for any purpose at all.

## Lines starting with two #-signs are documentation
## comments, which should describe the purpose and
## requirements of an atom or property. They can be
## processed into documentation in much the same way
## as JavaDoc comments in Java source files. As with
## JavaDoc, they may contain markup tags; however,
## these should ideally be restricted to those tags
## which are the same for both HTML and our own
## Styled Text markup, since they may wind up in both
## forms. At present this means tags for BOLD, ITALIC
## and UNDERLINE only.

## Documentation comments refer to whatever is defined
## immediately after them, so the doc comment for an
## atom should precede the atom definition, and that for
## a property should precede the property definition.

## This whole collection of doc comments would become
## the documentation for the <b>Dummy</b> atom.

# There are other special comment types, which have
# some special significance for the design tools but
# do not have any impact on the objects designed,
# but for the most part these will be automatically
# generated by the tools and are not relevant to the
# present specification.

# The following defines an atom called Dummy that
# inherits from other atoms called Parent1 and Parent2.
!new atom Dummy Parent1 Parent2

# Each line inside the braces defines a property
# of the atom and assigns it a value. Atoms and
# things automatically have all the properties of
# all their ancestors, so properties only need to be
# specified if either (a) they are new to this atom,
# not inherited from any of its parents or (b) if the
# inherited value needs to be customized.

# The value of a property can be any of the following
# types:
#
#   String      An ordinary text string, enclosed in
#               double quotation marks, eg "a string."
#   Integer     Any whole number, eg 12345.
#   Boolean     A truth value, represented by the
#               unquoted strings TRUE and FALSE (case
#               insensitive), eg True.
#   Action      The name of an Action class to be executed,
#               prefixed with an exclamation mark, eg !Eat.
#   Atom        The ID of a previously-defined atom or
#               thing, prefixed with a dollar-sign,
#               eg $Erics_Bicycle.
#   List        A list of items, which may themselves
#               be any of these types, enclosed in
#               square brackets and delimited by whitespace,
#               eg [1 2 3]
#   Dictionary  A list of key=value pairs, where the keys
#               are strings and the values can be any of
#               these types, enclosed in square brackets
#               and delimited by whitespace,
#               eg [ "name"="Kenny" "action"=!Explode ]
!set Dummy.aString "Blah blah blah"
!set Dummy.anInteger 9907
!set Dummy.aBoolean true
!set Dummy.anAction !Explode
!set Dummy.anAtom $South_Park_Savings_and_Loan
!set Dummy.aList [ "Strike one!" $Strike_Two "Strike three and out!" ]


# A property definition may continue over multiple lines
# using a backslash character '\' to indicate continuation.
# Note that the first line ends immediately before the backslash,
# but all leading whitespace is trimmed from the following line.
# So in this case a space is left before the backslash to separate
# "that" from "continues".
!set Dummy.aLongProperty "This is a long string value that continues onto the next line."
!noun Dummy dummy
!noun Dummy pacifier

