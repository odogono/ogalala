// $Id: DatabaseBuilder.java,v 1.8 1999/03/17 17:34:04 matt Exp $
// Create a world database.
// Matthew Caldwell, 10 November 1998
// Copyright (C) Ogalala Ltd. <info@ogalala.com>

package com.ogalala.tools;

import java.io.*;
import java.util.*;

import com.ogalala.util.*;
import com.ogalala.mua.*;

/**
 *  A utility to build a world database from its scripts.
 *  This is used by the Makefile for the WorldRunner app.
 *  <p>
 *  Note that the resulting database, like that for the
 *  game itself, does <b>not</i> include doc comments or other
 *  special properties that would be generated by the
 *  documentation compiler (eg: __, __nouns__, __odl__,
 *  __final__). If those properties are required (as they
 *  are by the AtomBuilder application) the database
 *  must be built with com.ogalala.tools.DocCompiler instead.
 */
public class DatabaseBuilder
{
	//----------------------------------------------------------------	
	//  class variables
	//----------------------------------------------------------------	

	protected static DatabaseBuilder theApp = null;
	
	protected static String DEFAULT_DB = "core.db";
	
	protected static String DEFAULT_PATH = ".";
	
	public static final String VERSION = "$Revision: 1.8 $";

	//----------------------------------------------------------------	
	//  instance variables
	//----------------------------------------------------------------
	
	protected String dbName = DEFAULT_DB;
	
	protected String scriptPath = DEFAULT_PATH;
	
	protected boolean force = false;

	//----------------------------------------------------------------	
	//  construction
	//----------------------------------------------------------------
	
	public DatabaseBuilder ()
	{
	}

	//----------------------------------------------------------------	
	//  application shell
	//----------------------------------------------------------------	

	/**
	 *  Create, initialize and run an instance of this
	 *  application.
	 */
	public static void main ( String[] args )
	{
		theApp = new DatabaseBuilder ();
		if ( theApp.init(args) )
			theApp.run();
	}
	
	//----------------------------------------------------------------
	
	/**
	 *  Initialize this instance from the command-line arguments
	 *  provided to <tt>main()</tt>.
	 
	 @return <tt>false</tt> if the arguments are erroneous,
	 		 <tt>true</tt> otherwise.
	 */
	public boolean init ( String[] args )
	{
		// -? -h --help : print usage and exit
		// -s scriptPath : set scriptPath
		// -d dbName : start up with given database
		
		if ( args.length == 0 )
			return true;
		
		int argPtr = 0;
		
		while (true)
		{
			if ( argPtr >= args.length )
				break;
			
			// -h: help	
			if ( "-h".equals(args[argPtr])
				 || "--help".equals(args[argPtr])
				 || "-?".equals(args[argPtr]) )
			{
				printUsage();
				argPtr++;
			}
			// -f: force
			else if ( "-f".equals(args[argPtr]) )
			{
				force = true;
				argPtr++;
			}
			// -s: script path
			else if ( "-s".equals(args[argPtr]) )
			{
				if ( argPtr + 1 < args.length )
				{
					scriptPath = args[argPtr + 1];
					argPtr += 2;
				}
				else
				{
					System.err.println ( "ERROR: option -s requires an argument" );
					return false;
				}
			}
			// -d: database file
			else if ( "-d".equals(args[argPtr]) )
			{
				if ( argPtr + 1 < args.length )
				{
					dbName = args[argPtr + 1];
					argPtr += 2;
				}
				else
				{
					System.err.println ( "ERROR: option -d requires an argument" );
					return false;
				}
			}
			// unknown arguments
			else
			{
				System.err.println ( "ERROR: Unknown option: " + args[argPtr] );
				printUsage();
				return false;
			}
			
		}
		
		return true;
	}

	//----------------------------------------------------------------	

	/**
	 *  Run the application.
	 */
	public void run ()
	{
		try
		{
			System.err.println ( "Creating database " + dbName );
			
			if ( WorldFactory.exists ( dbName ) )
			{
				if ( !force )
				{
					System.err.println ( "ERROR: database already exists" );
					return;
				}
			}
			
			World world = WorldFactory.newWorld( dbName, scriptPath );
			world.runStartupScripts();
			WorldFactory.saveWorld ( world );
			
			System.err.println ( "Database created." );
		}
		catch ( Exception e )
		{
			System.err.println ( "ERROR: Exception creating database: " + e );
		}
	}
	
	//----------------------------------------------------------------	

	/**
	 *  Print a usage message for this application to
	 *  <tt>System.err</tt>.
	 */
	public void printUsage ()
	{
		System.err.println("DatabaseBuilder [" + VERSION + "] usage:");
		System.err.println("java com.ogalala.tools.DatabaseBuilder [options [args]]");
		System.err.println("  options:");
		System.err.println("  -d dataBase       specify fileName of created database" );
		System.err.println("  -s scriptPath     search scriptPath for script files");
		System.err.println("  -f                overwrite existing database");
		System.err.println("  -h | --help | -?  print this usage message");
	}
		
	//----------------------------------------------------------------

}